= LoadResource {<img src="https://badge.fury.io/rb/load_resource.png" alt="Gem Version" />}[http://badge.fury.io/rb/load_resource]

Wiki[https://github.com/yakko/load_resource/wiki] | RubyGems[https://rubygems.org/gems/load_resource]

LoadResource an elegant way of loading resorces in your restful controllers.

== Installation

In <b>Rails 3</b> and <b>Rails 4</b>, add this to your Gemfile and run the +bundle+ command.

  gem "load_resource"

  bundle

Run this command to make all your new generated scaffold controllers come with a load_resource call by default

  rails g load_resource:install

== Instructions

== 1. Using the command

{<img src="readme_images/method.png" alt="image" />}[https://github.com/yakko/load_resource]

  class CleanersController < ApplicationController
    before_action :define_cleaner

    private
      # Use callbacks to share common setup or constraints between actions.
      def define_cleaner

        load_resource do
          before                                      { # load your nested resource's parent here if you need one }
          for_action(:index)                          { @cleaners = Cleaner.all                }
          for_action(:new)                            { @cleaner  = Cleaner.new                }
          for_action(:create)                         { @cleaner  = Cleaner.new(cleaner_params) }
          for_action(:show, :edit, :update, :destroy) { @cleaner  = Cleaner.find(params[:id])  }
          after                                       { # run your authorization logic here if you need one }
        end
        
      end

  end

== 2. Enjoy your clean controller

{<img src="readme_images/clean_controller.png" alt="image" />}[https://github.com/yakko/load_resource]


== 3. Nested Routes

Given that

Company has_many :clears

{<img src="readme_images/nested.png" alt="image" />}[https://github.com/yakko/load_resource]


== 4. Authorization

{<img src="readme_images/authorization.png" alt="image" />}[https://github.com/yakko/load_resource]

  class CleanersController < ApplicationController
    before_action :define_cleaner

    private
      # Use callbacks to share common setup or constraints between actions.
      def define_cleaner

        load_resource do
          before                                      { @company = Company.find(params[:company_id]) }
          for_action(:index)                          { ... }
          for_action(:new)                            { ... }
          for_action(:create)                         { ... }
          for_action(:show, :edit, :update, :destroy) { @cleaner  = @company.cleaners.find(params[:id])  }
          after do
            if @company.manager == current_user
              flash[:alert] = "You need to be the manager for #{@company.name} to access this area."
              redirect_to root_path
            end
          end
        end
        
      end

  end




This project rocks and uses MIT-LICENSE.